git config  --system - сохранение всего в gitconfig на моем Mac
git config --global - хранит настройки конкретного пользователя
git comfig - только для отдельного проекта

//изменение текстового редактора
git config --global core.editor emacs

//проверка настроек
git config --list

//проверка настроек по ключу
git config user.name


//инициализация репозитория
git init


// связывание репозиториев - локальных и удаленных
git remote add origin <путь до удаленной репы>

//проверка добавления удаленной репы = вывод всех удаленных реп
git remote

//получение URL адреса удаленного репы
git remote get-url origin

// проверка + получение адреса 
git remote -v

// удаление связывания
git remote set-url --delete origin <путь до удаленной репы>

//удаление  псевдонима репы и его связи с локальным
git remote remove academy

//изменение адреса удаленной репы
git remote set-url origin <путь до удаленной репы>

//переименовка удаленой репы
git remote renane origin klesctch

//укороченная информация о состоянии файла
git status -s //--short

//неотслеживаемый файл
untacked || ??

//добавление файлов относительно ТЕКУЩЕЙ директории (где находимся)
git add .

//файлы готовы к отслежке (индексированию)
git status - s === A 

//добавление в индекс ВСЕХ файлов независимо в какой директории мы находимся
git add :


//вывод хэшей коммита
git log

//уместить больше коммитов
git log --oneline

//статистика коммитов
git log --stat 

//добавление только части изменения из файла
git add -p // --path

//добавиление изменений в только что созданный комимит
git commit --amend //хеш измениттся

//или 
git commit --amend -m 'новый текст комимита'

//добавление в индекс
git add -A //из красного => в зеленый

//стягивание изменений из удаленного в локльный
git pull

//стягивание из удаленого в определенную ветку локального
git pull <remote> <branch>
git pull origin master


//получение изменений с удаленонго репо
 git fetch 

//слияние удаленного и локального 
git merge



//объединение веток
git merge --no--ff develop -m 'feat: the develop branch is merged into the master branch'

//изменение ветки по умолчанию
git config --system init.defaultBranch master 

//создание новой ветки
git branch <имя ветки>

//переход на новую ветку
git checkout <имя ветки>

//создание новой ветки и тут же переход на нее 
git checkout -b <имя новой ветки>

//другой метод создания и переключения
git switch --create <имя ветки>
git switch -c <имя ветки>

//переключение на ветку назад
git switch -

//просмотр текущих веток
git branch

//cписок веток толко локальных
get branch -l //--list

//шаблон для поиска веток
git branch -l 'task-*'

//просмотр удаленных веток
git branch -r  // --remotes - эти ветки всегда красного цвета

//просмотр всех веток (локальных и удаленных)
git branch -a // --all

//удаление ветки из ЛОКАЛЬНОГО
git branch -d <имя ветки> // --delete
НО НУЖНО ПЕРЕЙТИ В ДРУГУЮ ветку

//удаление ветки по принуждению
git branch -D  = git branch -d -f  <имя ветки>// --delete --force

//удаление ветки в УДАЛЕННОМ репо
git push -d origin <имя ветки> // --delete

//принудительное выполнение команд
--force

РЕЖИМЫ СЛИЯНИЯ

//fast-forward -  не будет дополнительного коммита о слиянии с другой веткой 
--ff     //режим по умолчанию в git
--ff-only    //принудительное использование режима -ff (по умолчанию --ff-only установлена для git push)

//no-fast-forward
при слиянии создается дополнительный коммит - это ребенок вливаемой и слияемой веток
все коммиты слияемой ветки будут идти после коммита слияния вливемой ветки

//отправить изменения со всех веток
git push --all 




